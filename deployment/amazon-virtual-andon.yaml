# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

Description: "(SO0071) - The AWS CloudFormation template for deployment of the SOLUTION_NAME_PLACEHOLDER. Version VERSION_PLACEHOLDER"

Parameters:
  AdministratorEmail:
    Type: String
    Description: (Required) Email address for Amazon Virtual Andon administrator.
    AllowedPattern: "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      AdministratorEmail:
        default: Administrator Email

Mappings:
  Send:
    AnonymousUsage:
      Data: "Yes"
  Solution:
    Data:
      Id: SO0071
      Version: VERSION_PLACEHOLDER
  SourceCode:
    General:
      S3Bucket: BUCKET_NAME_PLACEHOLDER
      KeyPrefix: SOLUTION_NAME_PLACEHOLDER/VERSION_PLACEHOLDER

Conditions:
  SendAnonymousUsage: !Equals [!FindInMap ["Send", "AnonymousUsage", "Data"], "Yes"]

Resources:
  # FrontEnd
  LogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: This bucket is to store S3 and CloudFront logs, so it does not require to have logs for this bucket.
          - id: W51
            reason: This bucket is to store S3 and CloudFront logs, so it does not require the bucket policy.

  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref LogsBucket
        LogFilePrefix: website-log/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        !Ref WebsiteBucket
      PolicyDocument:
        Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Join ["/", [!GetAtt WebsiteBucket.Arn, "*"]]
              Principal:
                CanonicalUser: !GetAtt WebsiteOriginAccessIdentity.S3CanonicalUserId
            - Effect: Deny
              Action: s3:*
              Resource:
                - !GetAtt WebsiteBucket.Arn
                - !Join ["/", [!GetAtt WebsiteBucket.Arn, "*"]]
              Condition:
                Bool:
                  aws:SecureTransport: False
              Principal: "*"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Amazon Virtual Andon Web Distribution
        Origins:
          - Id: S3-amazon-virtual-andon
            DomainName:  !Sub ${WebsiteBucket}.s3.${AWS::Region}.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${WebsiteOriginAccessIdentity}"
        DefaultCacheBehavior:
          TargetOriginId: S3-amazon-virtual-andon
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
        IPV6Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        Enabled: true
        HttpVersion: http2
        Logging:
          IncludeCookies: false
          Bucket: !GetAtt LogsBucket.DomainName
          Prefix: cf-log/
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W70
            reason: Default CloudFront certificate does not support TLS 1.2.

  WebsiteOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${WebsiteBucket}

  # Database
  SiteTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True
      GlobalSecondaryIndexes:
        - IndexName: name-index
          KeySchema:
            - AttributeName: name
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AreaTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: areaSiteId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True
      GlobalSecondaryIndexes:
        - IndexName: areaSiteId-name-index
          KeySchema:
            - AttributeName: areaSiteId
              KeyType: HASH
            - AttributeName: name
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  StationTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: stationAreaId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True
      GlobalSecondaryIndexes:
        - IndexName: stationAreaId-name-index
          KeySchema:
            - AttributeName: stationAreaId
              KeyType: HASH
            - AttributeName: name
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  ProcessTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: processAreaId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True
      GlobalSecondaryIndexes:
        - IndexName: processAreaId-name-index
          KeySchema:
            - AttributeName: processAreaId
              KeyType: HASH
            - AttributeName: name
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  DeviceTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: deviceStationId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True
      GlobalSecondaryIndexes:
        - IndexName: deviceStationId-name-index
          KeySchema:
            - AttributeName: deviceStationId
              KeyType: HASH
            - AttributeName: name
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  EventTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: eventProcessId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True
      GlobalSecondaryIndexes:
        - IndexName: eventProcessId-name-index
          KeySchema:
            - AttributeName: eventProcessId
              KeyType: HASH
            - AttributeName: name
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  IssueTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: siteName
          AttributeType: S
        - AttributeName: "areaName#status#processName#stationName#deviceName#created"
          AttributeType: S
        - AttributeName: "areaName#status#processName#eventDescription#stationName#deviceName#created"
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True
      GlobalSecondaryIndexes:
        - IndexName: ByDevice-index
          KeySchema:
            - AttributeName: siteName
              KeyType: HASH
            - AttributeName: "areaName#status#processName#stationName#deviceName#created"
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: BySiteAreaStatus-index
          KeySchema:
            - AttributeName: siteName
              KeyType: HASH
            - AttributeName: "areaName#status#processName#eventDescription#stationName#deviceName#created"
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  PermissionTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True

  RootCauseTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: rootCause
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True
      GlobalSecondaryIndexes:
        - IndexName: rootCause-index
          KeySchema:
            - AttributeName: rootCause
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # GraphQL - AppSync
  GraphQLStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - http://s3.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/amazon-virtual-andon-graphql.template
        - S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
          KeyPrefix: !FindInMap ["SourceCode", "General", "KeyPrefix"]
      Parameters:
        SiteTable: !Ref SiteTable
        AreaTable: !Ref AreaTable
        StationTable: !Ref StationTable
        ProcessTable: !Ref ProcessTable
        DeviceTable: !Ref DeviceTable
        EventTable: !Ref EventTable
        IssueTable: !Ref IssueTable
        PermissionTable: !Ref PermissionTable
        RootCauseTable: !Ref RootCauseTable
        UserPoolId: !Ref UserPool
        SourceCodeS3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        SourceCodeKeyPrefix: !FindInMap ["SourceCode", "General", "KeyPrefix"]

  # Authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ava-userpool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
        InviteMessageTemplate:
          EmailMessage:
            !Sub |
              <p>
                You are invited to join Amazon Virtual Andon. Your temporary password is as follows:
              </p>
              <p>
                E-Mail: <strong>{username}</strong><br />
                Password: <strong>{####}</strong>
              </p>
              <p>
                Please sign in to Amazon Virtual Andon with your Username (E-Mail) and temporary password provided above at:<br />
                https://${CloudFrontDistribution.DomainName}
              </p>
          EmailSubject: "[Amazon Virtual Andon] Login Information"
        UnusedAccountValidityDays: 7
      AutoVerifiedAttributes:
        - email
      EmailVerificationSubject: "[Amazon Virtual Andon] Verification Code"
      EmailVerificationMessage:
        !Sub |
          <p>
            Your Amazon Virtual Andon verification code is <strong>{####}</strong>.
          </p>
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True
          RequireUppercase: True
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ava-userpool-client
      RefreshTokenValidity: 1
      GenerateSecret: False
      UserPoolId: !Ref UserPool
      PreventUserExistenceErrors: ENABLED

  UserPoolAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Admin group for Amazon Virtual Andon
      GroupName: AdminGroup
      Precedence: 0
      UserPoolId: !Ref UserPool

  UserPoolManagerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Manager group for Amazon Virtual Andon
      GroupName: ManagerGroup
      Precedence: 1
      UserPoolId: !Ref UserPool

  UserPoolAssociateGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Associate group for Amazon Virtual Andon
      GroupName: AssociateGroup
      Precedence: 2
      UserPoolId: !Ref UserPool

  UserPoolEngineerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Engineer group for Amazon Virtual Andon
      GroupName: EngineerGroup
      Precedence: 3
      UserPoolId: !Ref UserPool

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: True
      UserAttributes:
        - Name: email
          Value: !Ref AdministratorEmail
        - Name: email_verified
          Value: True
      Username: !Ref AdministratorEmail
      UserPoolId: !Ref UserPool

  AdminGroupAssignment:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref UserPoolAdminGroup
      Username: !Ref AdminUser
      UserPoolId: !Ref UserPool

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: False

  IdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Path: /
      Policies:
        - PolicyName: AVASNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:CreateTopic
                  - sns:Subscribe
                  - sns:DeleteTopic
                  - sns:TagResource
                  - sns:ListSubscriptionsByTopic
                  - sns:Unsubscribe
                Resource:
                  - !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:andon-*
        - PolicyName: AVAIotPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iot:AttachPrincipalPolicy
                  - iot:Connect
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iot:Publish
                Resource:
                  - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topic/ava/issues
                  - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topic/ava/groups/*
              - Effect: Allow
                Action:
                  - iot:Subscribe
                Resource:
                  - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/ava/groups/*
              - Effect: Allow
                Action:
                  - iot:Receive
                Resource:
                  - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topic/ava/groups/*
        - PolicyName: AVACognitoPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                  - cognito-idp:ListUsersInGroup
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminRemoveUserFromGroup
                Resource:
                  - !GetAtt UserPool.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: To connect IoT and attach IoT policy to Cognito identity cannot speficy the specific resources.

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt IdentityPoolRole.Arn

  # IoT
  HandleIssuesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Amazon Virtual Andon Lambda function to handle issues
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "ava-issue-handler.zip"]]
      Handler: index.handler
      Role: !GetAtt HandleIssuesRole.Arn
      Runtime: nodejs12.x
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          API_ENDPOINT: !GetAtt GraphQLStack.Outputs.GraphQLEndpoint
          ACCOUNT_ID: !Ref "AWS::AccountId"

  HandleIssuesRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        RuleDisabled: False
        Description: Issues from the AVA Client are submitted to this topic and sent to lambda for processing
        Sql: >-
          SELECT * FROM 'ava/issues'
        Actions:
          - Lambda:
              FunctionArn: !GetAtt HandleIssuesFunction.Arn

  UserGroupChangeRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        RuleDisabled: False
        Description: User group changes by administrators will be captured.
        Sql: >-
          SELECT * FROM 'ava/groups/#'

  LambdaInvokeHandleIssuesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt HandleIssuesFunction.Arn
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:rule/${HandleIssuesRule}
      SourceAccount: !Ref "AWS::AccountId"

  HandleIssuesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: IssueHandlerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource:
                  - !Join ["", [!GetAtt GraphQLStack.Outputs.GraphQLArn, "/types/Mutation/fields/createIssue"]]
                  - !Join ["", [!GetAtt GraphQLStack.Outputs.GraphQLArn, "/types/Mutation/fields/updateIssue"]]
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:andon-*

  IoTResourcePolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iot:Publish
            Resource:
              - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topic/ava/issues
              - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topic/ava/groups/*
          - Effect: Allow
            Action:
              - iot:Subscribe
            Resource:
              - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/ava/groups/*
          - Effect: Allow
            Action:
              - iot:Receive
            Resource:
              - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topic/ava/groups/*
          - Effect: Allow
            Action:
              - iot:Connect
            Resource:
              - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:client/*

  # Custom Resource
  CustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Amazon Virtual Andon Lambda function for custom resource
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "ava-custom-resource.zip"]]
      Handler: index.handler
      Role: !GetAtt CustomResourceRole.Arn
      Runtime: nodejs12.x
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          RetrySeconds: 5

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
        - PolicyName: IoTPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iot:DescribeEndpoint
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iot:ListTargetsForPolicy
                Resource:
                  - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:policy/*
              - Effect: Allow
                Action:
                  - iot:DetachPrincipalPolicy
                Resource:
                  - "*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Join ["", ["arn:aws:s3:::", !FindInMap ["SourceCode", "General", "S3Bucket"], "-", !Ref "AWS::Region", "/", !FindInMap ["SourceCode", "General", "KeyPrefix"], "/console/*"]]
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Join ["/", [!GetAtt WebsiteBucket.Arn, "*"]]
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: There's no specific ARN for Cognito identity attached to IoT policy. Describe endpoint of IoT cannot have ARN.

  CreateUuid:
    Type: Custom::CreateUuid
    Properties:
      ServiceToken: !GetAtt CustomResourceFunction.Arn

  SendAnonymousUsage:
    Type: Custom::SendAnonymousUsage
    Condition: SendAnonymousUsage
    Properties:
      ServiceToken: !GetAtt CustomResourceFunction.Arn
      SolutionId: !FindInMap ["Solution", "Data", "Id"]
      UUID: !GetAtt CreateUuid.UUID
      Version: !FindInMap ["Solution", "Data", "Version"]

  CopyWebsite:
    Type: Custom::CopyWebsite
    Properties:
      ServiceToken: !GetAtt CustomResourceFunction.Arn
      SourceBucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref "AWS::Region"]]
      SourceKey: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "console"]]
      SourceManifest: "site-manifest.json"
      DestinationBucket: !Ref WebsiteBucket

  PutWebsiteConfig:
    Type: Custom::PutWebsiteConfig
    Properties:
      ServiceToken: !GetAtt CustomResourceFunction.Arn
      S3Bucket: !Ref WebsiteBucket
      S3Key: assets/andon_config.js
      ConfigItem:
        UserPoolId: !Ref UserPool
        UserPoolClientWebId: !Ref UserPoolClient
        CognitoIdentityPoolId: !Ref IdentityPool
        GraphQLEndpoint: !GetAtt GraphQLStack.Outputs.GraphQLEndpoint
        IotPolicyName: !Ref IoTResourcePolicy
        SolutionsSendMetrics: !FindInMap ["Send", "AnonymousUsage", "Data"]
        SolutionId: !FindInMap ["Solution", "Data", "Id"]
        SolutionUuid: !GetAtt CreateUuid.UUID
        SolutionVersion: !FindInMap ["Solution", "Data", "Version"]

  DeleteStack:
    Type: Custom::DeleteStack
    Properties:
      ServiceToken: !GetAtt CustomResourceFunction.Arn
      IotPolicyName: !Ref IoTResourcePolicy

Outputs:
  AmazonVirtualAndonConsole:
    Description: Amazon Virtual Andon console URL
    Value: !Sub https://${CloudFrontDistribution.DomainName}
  WebsiteAssetBucket:
    Description: Amazon Virtual Andon web site assets bucket
    Value: !Ref WebsiteBucket
  GraphQLEndpoint:
    Description: Amazon Virtual Andon GraphQL endpoint
    Value: !GetAtt GraphQLStack.Outputs.GraphQLEndpoint
  SolutionVersion:
    Description: Amazon Virtual Andon Version
    Value: !FindInMap ["Solution", "Data", "Version"]